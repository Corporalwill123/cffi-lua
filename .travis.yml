language: cpp
sudo: required

branches:
  only:
    - master
    # release branches
    - /^[0-9]+\.[0-9]+\.[0-9]+$/

dist: bionic
osx_image: xcode11.3

addons:
  # os x dependencies
  homebrew:
    packages:
      - libffi
      - lua
      - ninja
    update: true

  # linux dependencies
  apt:
    packages:
      - wget
      - tar
      - gzip
      - make
      - pkg-config
      - ninja-build
      - python3-pip
      - python3-setuptools
      - libffi-dev
    update: true

matrix:
  include:
    # windows, visual studio 2017, all versions
    - os: windows
      env: LUA_VERSION="5.4.0 5.3.5 5.2.4 5.1.5" FFI_TOOLCHAIN=msvc

    # windows, MSYS2 with mingw-w64-x86_64-gcc, 5.3 only
    - os: windows
      env: LUA_VERSION=5.3 FFI_TOOLCHAIN=msys2

    # os x, clang, 5.3 only
    - os: osx
      compiler: clang
      env: LUA_VERSION=5.3 CC=clang CXX=clang++

    # x86_64 linux, test all lua versions under gcc + 5.4 under clang
    - os: linux
      arch: amd64
      compiler: gcc
      env: LUA_VERSION=5.1 CC=gcc CXX=g++
    - os: linux
      arch: amd64
      compiler: gcc
      env: LUA_VERSION=5.2 CC=gcc CXX=g++
    - os: linux
      arch: amd64
      compiler: gcc
      env: LUA_VERSION=5.3.5 LUA_SRC=1 CC=gcc CXX=g++
    - os: linux
      arch: amd64
      compiler: gcc
      env: LUA_VERSION=5.4.0 LUA_SRC=1 CC=gcc CXX=g++
    - os: linux
      arch: amd64
      compiler: clang
      env: LUA_VERSION=5.4.0 LUA_SRC=1 CC=clang CXX=clang++

    # ppc64le linux, test gcc and clang, 5.4 only
    - os: linux
      arch: ppc64le
      compiler: gcc
      env: LUA_VERSION=5.4.0 LUA_SRC=1 CC=gcc CXX=g++
    - os: linux
      arch: ppc64le
      compiler: clang
      env: LUA_VERSION=5.4.0 LUA_SRC=1 CC=clang CXX=clang++

    # s390x linux, test gcc and clang, 5.4 only
    - os: linux
      arch: s390x
      compiler: gcc
      env: LUA_VERSION=5.4.0 LUA_SRC=1 CC=gcc CXX=g++
    - os: linux
      arch: s390x
      compiler: clang
      env: LUA_VERSION=5.4.0 LUA_SRC=1 CC=clang CXX=clang++

    # aarch64 linux, test gcc and clang, 5.4 only
    - os: linux
      arch: arm64
      compiler: gcc
      env: LUA_VERSION=5.4.0 LUA_SRC=1 CC=gcc CXX=g++
    - os: linux
      arch: arm64
      compiler: clang
      env: LUA_VERSION=5.4.0 LUA_SRC=1 CC=clang CXX=clang++

before_install:
  - |
      if [ -n "$LUA_SRC" ]; then
          for lua_ver in ${LUA_VERSION}; do
              local lua_maj=${lua_ver:0:3}
              lua_maj=${lua_maj/./}
              wget https://www.lua.org/ftp/lua-${LUA_VERSION}.tar.gz || exit 1
              tar xf lua-${LUA_VERSION}.tar.gz || exit 1
              cd lua-${LUA_VERSION}
              make -j4 MYCFLAGS="-fPIC" PLAT=linux || exit 1
              mkdir -p ../deps${lua_maj}/include
              cp src/lua*.h* ../deps${lua_maj}/include
              cp src/lauxlib.h ../deps${lua_maj}/include
              cp src/liblua.a ../deps${lua_maj}
              cp src/lua ../deps${lua_maj}
              cd ..
          done
      elif [ "$TRAVIS_OS_NAME" == "linux" ]; then
          sudo apt-get -y install lua${LUA_VERSION} liblua${LUA_VERSION}-dev
      fi
  - |
      if [ "$TRAVIS_OS_NAME" == "osx" ]; then
          pip3 install meson
      elif [ "$TRAVIS_OS_NAME" == "linux" ]; then
          sudo pip3 install meson
      fi
  - |
      if [ "$FFI_TOOLCHAIN" = "msvc" ]; then
          choco install --no-progress -y 7zip.portable || exit 1
          choco install --no-progress -y python3 || exit 1
          choco install --no-progress -y ninja || exit 1

          export PATH="/c/Python39:/c/Python39/Scripts:$PATH"
          export PATH="/c/ProgramData/chocolatey/lib/ninja/tools:$PATH"
          export PATH="/c/ProgramData/chocolatey/lib/7zip.portable/tools:$PATH"

          pip3 install meson
      fi
  - |
      if [ "$FFI_TOOLCHAIN" = "msys2" ]; then
          [[ ! -f C:/tools/msys64/msys2_shell.cmd ]] && rm -rf C:/tools/msys64
          choco uninstall -y mingw
          choco upgrade --no-progress -y msys2

          export msys2='cmd //C RefreshEnv.cmd '
          export msys2+='& set MSYS=winsymlinks:nativestrict '
          export msys2+='& C:\\tools\\msys64\\msys2_shell.cmd -defterm -no-start'
          export mingw64="$msys2 -mingw64 -full-path -here -c "\"\$@"\" --"
          export msys2+=" -msys2 -c "\"\$@"\" --"

          $msys2 pacman -S --noconfirm --needed mingw-w64-x86_64-toolchain
          $msys2 pacman -S --noconfirm --needed mingw-w64-x86_64-meson
          $msys2 pacman -S --noconfirm --needed mingw-w64-x86_64-lua
          $msys2 pacman -S --noconfirm --needed mingw-w64-x86_64-libffi

          taskkill //IM gpg-agent.exe //F # https://travis-ci.community/t/4967
          export PATH=/C/tools/msys64/mingw64/bin:$PATH
      fi

before_cache:
  - |
      if [ "$FFI_TOOLCHAIN" = "msys2" ]; then
          # https://unix.stackexchange.com/a/137322/107554
          $msys2 pacman --sync --clean --noconfirm
      fi

cache:
  directories:
    - $HOME/AppData/Local/Temp/chocolatey
    - /C/tools/msys64

before_script:
  - |
      if [ "$TRAVIS_OS_NAME" == "windows" ]; then
          # we take custom toolchain decisions here
          unset CC CXX CC_FOR_BUILD CXX_FOR_BUILD
      fi
  - |
      if [ "$FFI_TOOLCHAIN" == "msvc" ]; then
          local lua_build="Win64_dll15_lib"
          local lua_bin="Win64_bin"
          local ffi_ver="3.3"
          local ffi_build="vc15_x64"

          # build static libffi ourselves, for our toolchain
          wget https://github.com/winlibs/libffi/archive/libffi-${ffi_ver}.zip || exit 1
          7z x libffi-${ffi_ver}.zip || exit 1
          mv libffi-libffi-${ffi_ver} libffi

          pushd libffi/win32/${ffi_build}
          # need to run everything in the windows cmd.exe shell...
          cmd.exe //C 'C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvarsall.bat' amd64 '&&' \
          msbuild.exe /property:Configuration=Release
          cp x64/Release/libffi.lib ../../.. || exit 1
          popd

          for lua_ver in ${LUA_VERSION}; do
              local lua_dmaj=${lua_ver:0:3}
              local lua_maj=${lua_dmaj/./}
              mkdir deps${lua_maj}

              # lua from luabinaries
              wget https://downloads.sourceforge.net/project/luabinaries/${lua_ver}/Windows%20Libraries/Dynamic/lua-${lua_ver}_${lua_build}.zip || exit 1
              wget https://downloads.sourceforge.net/project/luabinaries/${lua_ver}/Tools%20Executables/lua-${lua_ver}_${lua_bin}.zip || exit 1
              cd deps${lua_maj}
              # unzip bin first
              7z x ../lua-${lua_ver}_${lua_bin}.zip || exit 1
              7z x ../lua-${lua_ver}_${lua_build}.zip -y || exit 1
              if [ -f "lua${lua_dmaj}.lib" ]; then
                  mv lua${lua_dmaj}.lib liblua.lib
              else
                  mv lua${lua_maj}.lib liblua.lib
              fi
              cd ..

              cp libffi/include/ffi.h deps${lua_maj}/include
              cp libffi/src/x86/ffitarget.h deps${lua_maj}/include
              cp libffi.lib deps${lua_maj}
          done
      fi

script:
  - |
      if [ "$TRAVIS_OS_NAME" == "osx" ]; then
          export PKG_CONFIG_PATH="/usr/local/opt/libffi/lib/pkgconfig"
      fi
  - |
      for lua_ver in ${LUA_VERSION}; do
          local lua_maj=${lua_ver:0:3}
          lua_maj=${lua_maj/./}
          mkdir build${lua_maj} && cd build${lua_maj}
          if [ "$FFI_TOOLCHAIN" == "msvc" ]; then
              cmd.exe //C 'C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvarsall.bat' amd64 '&&' \
              meson .. -Dlua_version=vendor -Dlibffi=vendor -Ddeps_dir=deps${lua_maj} '&&' \
              ninja all '&&' ninja test || exit 1
          elif [ "$FFI_TOOLCHAIN" = "msys2" ]; then
              meson .. -Dlua_version="${LUA_VERSION}" \
                  -Dshared_libffi=true \
                  -Ddeps_dir=deps${lua_maj} \
                  -Dlua_path="/C/tools/msys64/mingw64/bin/lua5.3.exe" || exit 1
              ninja all && ninja test || exit 1
          else
              if [ -n "$LUA_SRC" ]; then
                  meson .. -Dlua_version=vendor -Dshared_libffi=true \
                    -Ddeps_dir=deps${lua_maj} || exit 1
              else
                  meson .. -Dlua_version="${LUA_VERSION}" \
                      -Dshared_libffi=true \
                      -Ddeps_dir=deps${lua_maj} || exit 1
              fi
              ninja all && ninja test || exit 1
          fi
          cd ..
      done
